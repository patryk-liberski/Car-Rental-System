import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the structure of a Car object
interface Car {
  id: number;
  type: 'sedan' | 'SUV' | 'van';
  available: boolean;
}

// Define the structure of the car state, which includes available cars and rentals
interface CarState {
  availableCars: Car[];
  rentals: { carId: number; type: string; startDate: string; days: number }[];
}

// Initial state for the cars slice
const initialState: CarState = {
  availableCars: [
    { id: 1, type: 'sedan', available: true },
    { id: 2, type: 'sedan', available: true },
    { id: 3, type: 'sedan', available: true },
    { id: 4, type: 'SUV', available: true },
    { id: 5, type: 'SUV', available: true },
    { id: 6, type: 'SUV', available: true },
    { id: 7, type: 'van', available: true },
    { id: 8, type: 'van', available: true },
    { id: 9, type: 'van', available: true },
  ],
  rentals: [],
};

// Create a slice for the car state, with actions to reserve and return cars
const carSlice = createSlice({
  name: 'cars',
  initialState,
  reducers: {
    // Action to reserve a car
    reserveCar: (state, action: PayloadAction<{ carId: number; type: string; startDate: string; days: number }>) => {
      // Find the car to be reserved by its ID
      const car = state.availableCars.find(c => c.id === action.payload.carId);

      // Check if the car is available for rent
      if (car && car.available) {
        // Count how many cars of this type are already rented
        const rentedCarsOfType = state.rentals.filter(rental => rental.type === action.payload.type).length;
        
        // Allow reservation only if less than 3 cars of the same type are rented
        if (rentedCarsOfType < 3) {
          car.available = false; // Mark the car as unavailable
          state.rentals.push(action.payload); // Add the rental to the rental history
        } else {
          console.log(`Limit of 3 ${action.payload.type} cars has been reached.`);
        }
      }
    },
    // Action to return a rented car
    returnCar: (state, action: PayloadAction<number>) => {
      // Find the car to be returned by its ID
      const car = state.availableCars.find(c => c.id === action.payload);
      if (car) {
        car.available = true; // Mark the car as available again
        // Remove the rental from the rental history
        state.rentals = state.rentals.filter(rental => rental.carId !== action.payload);
      }
    },
  },
});

// Export the actions generated by createSlice
export const { reserveCar, returnCar } = carSlice.actions;

// Export the reducer for the cars slice
export default carSlice.reducer;