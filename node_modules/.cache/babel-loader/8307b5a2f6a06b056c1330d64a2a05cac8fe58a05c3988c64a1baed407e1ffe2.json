{"ast":null,"code":"import React,{useState}from'react';import{useDispatch,useSelector}from'react-redux';import{reserveCar}from'../features/cars/carSlice';import'../styles/ReservationForm.scss';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ReservationForm=()=>{// Dispatch hook to send actions to the Redux store\nconst dispatch=useDispatch();// Selector to retrieve available cars from the Redux store\nconst availableCars=useSelector(state=>state.cars.availableCars);// Local state for managing form inputs\nconst[carType,setCarType]=useState('sedan');const[startDate,setStartDate]=useState('');const[days,setDays]=useState(1);const[errorMessage,setErrorMessage]=useState('');// Form submission handler\nconst handleSubmit=e=>{e.preventDefault();// Get today's date in YYYY-MM-DD format\nconst today=new Date().toISOString().split('T')[0];// Validate if the start date is selected\nif(!startDate){setErrorMessage('Please select a start date.');return;}// Validate if the start date is not in the past\nif(startDate<today){setErrorMessage('The start date cannot be in the past.');return;}// Validate if the number of rental days is greater than 0\nif(days<=0){setErrorMessage('The number of days must be greater than 0.');return;}// Find an available car of the selected type\nconst selectedCar=availableCars.find(car=>car.type===carType&&car.available);if(selectedCar){// Dispatch the reserveCar action if an available car is found\ndispatch(reserveCar({carId:selectedCar.id,type:selectedCar.type,startDate,days}));setErrorMessage('');// Clear error message after successful reservation\n}else{// Set error message if no cars of the selected type are available\nsetErrorMessage(`No available cars of type ${carType}`);}};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"form\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"form__header\",children:\"Reserve a Car\"}),errorMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"form__error\",children:errorMessage}),/*#__PURE__*/_jsx(\"label\",{className:\"form__label\",htmlFor:\"carType\",children:\"Car Type\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"carType\",value:carType,onChange:e=>setCarType(e.target.value),className:\"form__select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"sedan\",children:\"Sedan\"}),/*#__PURE__*/_jsx(\"option\",{value:\"SUV\",children:\"SUV\"}),/*#__PURE__*/_jsx(\"option\",{value:\"van\",children:\"Van\"})]}),/*#__PURE__*/_jsx(\"label\",{className:\"form__label\",htmlFor:\"startDate\",children:\"Start Date\"}),/*#__PURE__*/_jsx(\"input\",{id:\"startDate\",type:\"date\",value:startDate,onChange:e=>setStartDate(e.target.value),className:\"form__input\"}),/*#__PURE__*/_jsx(\"label\",{className:\"form__label\",htmlFor:\"days\",children:\"Days\"}),/*#__PURE__*/_jsx(\"input\",{id:\"days\",type:\"number\",value:days,onChange:e=>setDays(Number(e.target.value)),className:\"form__input\",min:\"1\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"form__button\",children:\"Reserve\"})]});};export default ReservationForm;","map":{"version":3,"names":["React","useState","useDispatch","useSelector","reserveCar","jsx","_jsx","jsxs","_jsxs","ReservationForm","dispatch","availableCars","state","cars","carType","setCarType","startDate","setStartDate","days","setDays","errorMessage","setErrorMessage","handleSubmit","e","preventDefault","today","Date","toISOString","split","selectedCar","find","car","type","available","carId","id","onSubmit","className","children","htmlFor","value","onChange","target","Number","min"],"sources":["/Users/patrykliberski/car-rental-system/src/components/ReservationForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport { reserveCar } from '../features/cars/carSlice';\nimport '../styles/ReservationForm.scss';\n\nconst ReservationForm: React.FC = () => {\n  // Dispatch hook to send actions to the Redux store\n  const dispatch = useDispatch();\n\n  // Selector to retrieve available cars from the Redux store\n  const availableCars = useSelector((state: RootState) => state.cars.availableCars);\n\n  // Local state for managing form inputs\n  const [carType, setCarType] = useState<'sedan' | 'SUV' | 'van'>('sedan');\n  const [startDate, setStartDate] = useState<string>('');\n  const [days, setDays] = useState<number>(1);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  // Form submission handler\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Get today's date in YYYY-MM-DD format\n    const today = new Date().toISOString().split('T')[0];\n\n    // Validate if the start date is selected\n    if (!startDate) {\n      setErrorMessage('Please select a start date.');\n      return;\n    }\n\n    // Validate if the start date is not in the past\n    if (startDate < today) {\n      setErrorMessage('The start date cannot be in the past.');\n      return;\n    }\n\n    // Validate if the number of rental days is greater than 0\n    if (days <= 0) {\n      setErrorMessage('The number of days must be greater than 0.');\n      return;\n    }\n\n    // Find an available car of the selected type\n    const selectedCar = availableCars.find(car => car.type === carType && car.available);\n    if (selectedCar) {\n      // Dispatch the reserveCar action if an available car is found\n      dispatch(reserveCar({ carId: selectedCar.id, type: selectedCar.type, startDate, days }));\n      setErrorMessage(''); // Clear error message after successful reservation\n    } else {\n      // Set error message if no cars of the selected type are available\n      setErrorMessage(`No available cars of type ${carType}`);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <h1 className=\"form__header\">Reserve a Car</h1>\n\n      {/* Display error message if any */}\n      {errorMessage && <p className=\"form__error\">{errorMessage}</p>}\n\n      {/* Car type selection */}\n      <label className=\"form__label\" htmlFor=\"carType\">Car Type</label>\n      <select\n        id=\"carType\"\n        value={carType}\n        onChange={(e) => setCarType(e.target.value as 'sedan' | 'SUV' | 'van')}\n        className=\"form__select\"\n      >\n        <option value=\"sedan\">Sedan</option>\n        <option value=\"SUV\">SUV</option>\n        <option value=\"van\">Van</option>\n      </select>\n\n      {/* Start date input */}\n      <label className=\"form__label\" htmlFor=\"startDate\">Start Date</label>\n      <input\n        id=\"startDate\"\n        type=\"date\"\n        value={startDate}\n        onChange={(e) => setStartDate(e.target.value)}\n        className=\"form__input\"\n      />\n\n      {/* Number of days input */}\n      <label className=\"form__label\" htmlFor=\"days\">Days</label>\n      <input\n        id=\"days\"\n        type=\"number\"\n        value={days}\n        onChange={(e) => setDays(Number(e.target.value))}\n        className=\"form__input\"\n        min=\"1\"\n      />\n\n      {/* Submit button */}\n      <button type=\"submit\" className=\"form__button\">Reserve</button>\n    </form>\n  );\n};\n\nexport default ReservationForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}