{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Define the structure of a Car object\n\n// Define the structure of the car state, which includes available cars and rentals\n\n// Initial state for the cars slice\nconst initialState = {\n  availableCars: [{\n    id: 1,\n    type: 'sedan',\n    available: true\n  }, {\n    id: 2,\n    type: 'sedan',\n    available: true\n  }, {\n    id: 3,\n    type: 'sedan',\n    available: true\n  }, {\n    id: 4,\n    type: 'SUV',\n    available: true\n  }, {\n    id: 5,\n    type: 'SUV',\n    available: true\n  }, {\n    id: 6,\n    type: 'SUV',\n    available: true\n  }, {\n    id: 7,\n    type: 'van',\n    available: true\n  }, {\n    id: 8,\n    type: 'van',\n    available: true\n  }, {\n    id: 9,\n    type: 'van',\n    available: true\n  }],\n  rentals: []\n};\n\n// Create a slice for the car state, with actions to reserve and return cars\nconst carSlice = createSlice({\n  name: 'cars',\n  initialState,\n  reducers: {\n    // Action to reserve a car\n    reserveCar: (state, action) => {\n      // Find the car to be reserved by its ID\n      const car = state.availableCars.find(c => c.id === action.payload.carId);\n\n      // Check if the car is available for rent\n      if (car && car.available) {\n        // Count how many cars of this type are already rented\n        const rentedCarsOfType = state.rentals.filter(rental => rental.type === action.payload.type).length;\n\n        // Allow reservation only if less than 3 cars of the same type are rented\n        if (rentedCarsOfType < 3) {\n          car.available = false; // Mark the car as unavailable\n          state.rentals.push(action.payload); // Add the rental to the rental history\n        } else {\n          console.log(`Limit of 3 ${action.payload.type} cars has been reached.`);\n        }\n      }\n    },\n    // Action to return a rented car\n    returnCar: (state, action) => {\n      // Find the car to be returned by its ID\n      const car = state.availableCars.find(c => c.id === action.payload);\n      if (car) {\n        car.available = true; // Mark the car as available again\n        // Remove the rental from the rental history\n        state.rentals = state.rentals.filter(rental => rental.carId !== action.payload);\n      }\n    }\n  }\n});\n\n// Export the actions generated by createSlice\nexport const {\n  reserveCar,\n  returnCar\n} = carSlice.actions;\n\n// Export the reducer for the cars slice\nexport default carSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","availableCars","id","type","available","rentals","carSlice","name","reducers","reserveCar","state","action","car","find","c","payload","carId","rentedCarsOfType","filter","rental","length","push","console","log","returnCar","actions","reducer"],"sources":["/Users/patrykliberski/Downloads/Car-Rental-System/src/features/cars/carSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Define the structure of a Car object\ninterface Car {\n  id: number;\n  type: 'sedan' | 'SUV' | 'van';\n  available: boolean;\n}\n\n// Define the structure of the car state, which includes available cars and rentals\ninterface CarState {\n  availableCars: Car[];\n  rentals: { carId: number; type: string; startDate: string; days: number }[];\n}\n\n// Initial state for the cars slice\nconst initialState: CarState = {\n  availableCars: [\n    { id: 1, type: 'sedan', available: true },\n    { id: 2, type: 'sedan', available: true },\n    { id: 3, type: 'sedan', available: true },\n    { id: 4, type: 'SUV', available: true },\n    { id: 5, type: 'SUV', available: true },\n    { id: 6, type: 'SUV', available: true },\n    { id: 7, type: 'van', available: true },\n    { id: 8, type: 'van', available: true },\n    { id: 9, type: 'van', available: true },\n  ],\n  rentals: [],\n};\n\n// Create a slice for the car state, with actions to reserve and return cars\nconst carSlice = createSlice({\n  name: 'cars',\n  initialState,\n  reducers: {\n    // Action to reserve a car\n    reserveCar: (state, action: PayloadAction<{ carId: number; type: string; startDate: string; days: number }>) => {\n      // Find the car to be reserved by its ID\n      const car = state.availableCars.find(c => c.id === action.payload.carId);\n\n      // Check if the car is available for rent\n      if (car && car.available) {\n        // Count how many cars of this type are already rented\n        const rentedCarsOfType = state.rentals.filter(rental => rental.type === action.payload.type).length;\n        \n        // Allow reservation only if less than 3 cars of the same type are rented\n        if (rentedCarsOfType < 3) {\n          car.available = false; // Mark the car as unavailable\n          state.rentals.push(action.payload); // Add the rental to the rental history\n        } else {\n          console.log(`Limit of 3 ${action.payload.type} cars has been reached.`);\n        }\n      }\n    },\n    // Action to return a rented car\n    returnCar: (state, action: PayloadAction<number>) => {\n      // Find the car to be returned by its ID\n      const car = state.availableCars.find(c => c.id === action.payload);\n      if (car) {\n        car.available = true; // Mark the car as available again\n        // Remove the rental from the rental history\n        state.rentals = state.rentals.filter(rental => rental.carId !== action.payload);\n      }\n    },\n  },\n});\n\n// Export the actions generated by createSlice\nexport const { reserveCar, returnCar } = carSlice.actions;\n\n// Export the reducer for the cars slice\nexport default carSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;;AAE7D;;AAOA;;AAMA;AACA,MAAMC,YAAsB,GAAG;EAC7BC,aAAa,EAAE,CACb;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAK,CAAC,EACzC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAK,CAAC,EACzC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAK,CAAC,EACzC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEC,SAAS,EAAE;EAAK,CAAC,EACvC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEC,SAAS,EAAE;EAAK,CAAC,EACvC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEC,SAAS,EAAE;EAAK,CAAC,EACvC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEC,SAAS,EAAE;EAAK,CAAC,EACvC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEC,SAAS,EAAE;EAAK,CAAC,EACvC;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEC,SAAS,EAAE;EAAK,CAAC,CACxC;EACDC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAGP,WAAW,CAAC;EAC3BQ,IAAI,EAAE,MAAM;EACZP,YAAY;EACZQ,QAAQ,EAAE;IACR;IACAC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAuF,KAAK;MAC9G;MACA,MAAMC,GAAG,GAAGF,KAAK,CAACT,aAAa,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKS,MAAM,CAACI,OAAO,CAACC,KAAK,CAAC;;MAExE;MACA,IAAIJ,GAAG,IAAIA,GAAG,CAACR,SAAS,EAAE;QACxB;QACA,MAAMa,gBAAgB,GAAGP,KAAK,CAACL,OAAO,CAACa,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAChB,IAAI,KAAKQ,MAAM,CAACI,OAAO,CAACZ,IAAI,CAAC,CAACiB,MAAM;;QAEnG;QACA,IAAIH,gBAAgB,GAAG,CAAC,EAAE;UACxBL,GAAG,CAACR,SAAS,GAAG,KAAK,CAAC,CAAC;UACvBM,KAAK,CAACL,OAAO,CAACgB,IAAI,CAACV,MAAM,CAACI,OAAO,CAAC,CAAC,CAAC;QACtC,CAAC,MAAM;UACLO,OAAO,CAACC,GAAG,CAAC,cAAcZ,MAAM,CAACI,OAAO,CAACZ,IAAI,yBAAyB,CAAC;QACzE;MACF;IACF,CAAC;IACD;IACAqB,SAAS,EAAEA,CAACd,KAAK,EAAEC,MAA6B,KAAK;MACnD;MACA,MAAMC,GAAG,GAAGF,KAAK,CAACT,aAAa,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKS,MAAM,CAACI,OAAO,CAAC;MAClE,IAAIH,GAAG,EAAE;QACPA,GAAG,CAACR,SAAS,GAAG,IAAI,CAAC,CAAC;QACtB;QACAM,KAAK,CAACL,OAAO,GAAGK,KAAK,CAACL,OAAO,CAACa,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACH,KAAK,KAAKL,MAAM,CAACI,OAAO,CAAC;MACjF;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEN,UAAU;EAAEe;AAAU,CAAC,GAAGlB,QAAQ,CAACmB,OAAO;;AAEzD;AACA,eAAenB,QAAQ,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}